name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s/**'
      - 'lgtm-helm/**'
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  build-and-push:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîê Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/llm_otel:app -f app/Dockerfile ./app
          docker push ${{ secrets.DOCKER_USERNAME }}/llm_otel:app

  deploy:
    name: üöÄ Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'kubectl'

      - name: üß≠ Get GKE Credentials
        run: |
          gcloud container clusters get-credentials "${{ secrets.GKE_CLUSTER_NAME }}" --region "${{ secrets.GKE_REGION }}"

      - name: üì¶ Install Helm
        uses: azure/setup-helm@v3

      - name: Add Helm Repos
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

      - name: Deploy Mimir (Metrics)
        run: |
          helm upgrade --install mimir grafana/mimir-distributed \
            --namespace observability \
            --create-namespace \
            --set mimir.alertmanager.enabled=false \
            --set mimir.compactor.enabled=true \
            --set mimir.minio.enabled=true \
            --set mimir.store_gateway.enabled=true

      - name: Deploy Tempo (Traces)
        run: |
          helm upgrade --install tempo grafana/tempo-distributed \
            --namespace observability \
            --set tempo.metricsGenerator.enabled=true

      - name: Deploy Loki (Logs)
        run: |
          helm upgrade --install loki grafana/loki-distributed \
            --namespace observability \
            --set loki.gateway.enabled=true

      - name: Deploy Grafana UI
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace observability \
            --set service.type=LoadBalancer \
            --set adminUser=admin \
            --set adminPassword=admin \
            --set datasources."datasources\.yaml".apiVersion=1 \
            --set datasources."datasources\.yaml".datasources[0].name=Prometheus \
            --set datasources."datasources\.yaml".datasources[0].type=prometheus \
            --set datasources."datasources\.yaml".datasources[0].url=http://mimir-distributor.observability:8080 \
            --set datasources."datasources\.yaml".datasources[1].name=Tempo \
            --set datasources."datasources\.yaml".datasources[1].type=tempo \
            --set datasources."datasources\.yaml".datasources[1].url=http://tempo-query.observability:16686 \
            --set datasources."datasources\.yaml".datasources[2].name=Loki \
            --set datasources."datasources\.yaml".datasources[2].type=loki \
            --set datasources."datasources\.yaml".datasources[2].url=http://loki-gateway.observability:3100

      #- name: Deploy OpenTelemetry Collector   # UNCOMMENT THIS IF WE WANT TO DEPLOY OTEL COLLECTOR USING HELM
        #run: |
          #helm upgrade --install otel-collector open-telemetry/opentelemetry-collector \
            #--namespace observability \
            #--create-namespace \
            #-f lgtm-helm/otel-values.yaml

      - name: üì¶ Apply K8s manifests from /k8s
        run: |
          kubectl apply -f k8s/

      - name: Deploy OpenTelemetry Demo App
        run: |
          helm install otel-demo open-telemetry/opentelemetry-demo \
            --namespace demo \
            --create-namespace \
            --set opentelemetry-collector.enabled=false \
            --set global.telemetry.enabled=true \
            --set global.telemetry.metrics.exporter.otlp.endpoint=http://otel-collector.observability:4317 \
            --set global.telemetry.traces.exporter.otlp.endpoint=http://otel-collector.observability:4317 \
            --set global.telemetry.logs.enabled=true \
            --set global.telemetry.logs.exporter.otlp.endpoint=http://otel-collector.observability:4317
